from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Data frames (already created)

# Function to calculate weighted similarity
def calculate_weighted_similarity(df1, df2, weights):
    # Combine text columns into a single string for each row
    df1_combined = df1.apply(lambda x: ' '.join(x.astype(str)), axis=1)
    df2_combined = df2.apply(lambda x: ' '.join(x.astype(str)), axis=1)
    
    # TF-IDF Vectorization
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(df1_combined.append(df2_combined))

    # Calculate cosine similarity
    cosine_sim = cosine_similarity(tfidf_matrix[0:1], tfidf_matrix[1:])
    
    # Calculate weighted score
    weighted_scores = []
    for i, row in df2.iterrows():
        score = 0
        for col, weight in weights.items():
            tfidf_vectorizer = TfidfVectorizer()
            col_tfidf_matrix = tfidf_vectorizer.fit_transform([df1[col][0], row[col]])
            col_similarity = cosine_similarity(col_tfidf_matrix[0:1], col_tfidf_matrix[1:])[0][0]
            score += col_similarity * weight
        weighted_scores.append(score)
    
    return weighted_scores

# Define weights




from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Example DataFrame setup
data = {
    'summary': ['Summary1', 'Summary2'],
    'country_name': ['USA', 'Canada'],
    'business_affected': ['Business1', 'Business2'],
    'text_to_search': ['Text1', 'Text2']
}
df = pd.DataFrame(data)

# Database DataFrame
db_data = {
    'text': ['Text about USA', 'Text about Canada', 'Other text']
}
db_df = pd.DataFrame(db_data)

# Augmenting text_to_search with country_name
weight_factor = 5  # You can adjust this based on how much weight you want to give
df['augmented_text'] = df.apply(lambda x: (x['country_name'] + ' ') * weight_factor + x['text_to_search'], axis=1)

# Create a TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer()

# Fit and transform the primary DataFrame
tfidf_matrix = tfidf_vectorizer.fit_transform(df['augmented_text'])

# Transform the database DataFrame
db_tfidf_matrix = tfidf_vectorizer.transform(db_df['text'])

# Calculate cosine similarity
cosine_sim = cosine_similarity(tfidf_matrix, db_tfidf_matrix)

# Resulting cosine similarity scores
print(cosine_sim)

weights = {
    'Title': 2.0,
    'Description': 1.5,
    'Country': 1.2,
    'Regulation': 1.5
}

# Calculate weighted similarities
weighted_similarities = calculate_weighted_similarity(df1, df2, weights)
df2['Weighted_Similarity'] = weighted_similarities

tools.display_dataframe_to_user(name="Second Data Frame with Weighted Similarity Scores", dataframe=df2)

df2[['ID', 'Title', 'Weighted_Similarity']]









from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Example DataFrame setup
data = {
    'summary': ['Summary1', 'Summary2'],
    'country_name': ['USA', None],  # Assume second entry has no country_name
    'business_affected': ['Business1', 'Business2'],
    'text_to_search': ['Text1', 'Text2']
}
df = pd.DataFrame(data)

# Database DataFrame
db_data = {
    'text': ['Text about USA', 'General text', 'Other text']
}
db_df = pd.DataFrame(db_data)

# Augmenting text_to_search with country_name
weight_factor = 5  # Adjust the weight factor as needed

# Function to concatenate country name if not None or empty
def augment_text(row):
    country_name = row['country_name']
    text_to_search = row['text_to_search']
    if country_name and country_name.strip():
        return (country_name + ' ') * weight_factor + text_to_search
    else:
        return text_to_search

df['augmented_text'] = df.apply(augment_text, axis=1)

# Create a TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer()

# Fit and transform the primary DataFrame
tfidf_matrix = tfidf_vectorizer.fit_transform(df['augmented_text'])

# Transform the database DataFrame
db_tfidf_matrix = tfidf_vectorizer.transform(db_df['text'])

# Calculate cosine similarity
cosine_sim = cosine_similarity(tfidf_matrix, db_tfidf_matrix)

# Display the cosine similarity scores
print(cosine_sim)

