from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Data frames (already created)

# Function to calculate weighted similarity
def calculate_weighted_similarity(df1, df2, weights):
    # Combine text columns into a single string for each row
    df1_combined = df1.apply(lambda x: ' '.join(x.astype(str)), axis=1)
    df2_combined = df2.apply(lambda x: ' '.join(x.astype(str)), axis=1)
    
    # TF-IDF Vectorization
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(df1_combined.append(df2_combined))

    # Calculate cosine similarity
    cosine_sim = cosine_similarity(tfidf_matrix[0:1], tfidf_matrix[1:])
    
    # Calculate weighted score
    weighted_scores = []
    for i, row in df2.iterrows():
        score = 0
        for col, weight in weights.items():
            tfidf_vectorizer = TfidfVectorizer()
            col_tfidf_matrix = tfidf_vectorizer.fit_transform([df1[col][0], row[col]])
            col_similarity = cosine_similarity(col_tfidf_matrix[0:1], col_tfidf_matrix[1:])[0][0]
            score += col_similarity * weight
        weighted_scores.append(score)
    
    return weighted_scores

# Define weights



from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Example single-row DataFrame setup
data = {
    'summary': ['Summary1'],
    'country_name': ['USA'],
    'business_affected': ['Business1'],
    'text_to_search': ['Text1']
}
df = pd.DataFrame(data)

# Database DataFrame
db_data = {
    'text': ['Text about USA', 'General text', 'Other text']
}
db_df = pd.DataFrame(db_data)

# Weight factor for how much 'country_name' should influence the search
weight_factor = 5  # Adjust as needed

# Function to concatenate 'country_name' if not None or empty
def augment_text(row):
    country_name = row['country_name']
    text_to_search = row['text_to_search']
    if country_name and country_name.strip():
        return (country_name + ' ') * weight_factor + text_to_search
    else:
        return text_to_search

# Augmenting the text
df['augmented_text'] = df.apply(augment_text, axis=1)

# Create a TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer()

# Fit and transform the primary DataFrame
tfidf_matrix = tfidf_vectorizer.fit_transform(df['augmented_text'])

# Transform the database DataFrame
db_tfidf_matrix = tfidf_vectorizer.transform(db_df['text'])

# Calculate cosine similarity
cosine_sim = cosine_similarity(tfidf_matrix, db_tfidf_matrix)

# Display the cosine similarity scores
print(cosine_sim)
